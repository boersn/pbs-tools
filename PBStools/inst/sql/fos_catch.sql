SELECT
  CE.spp,
  CE.TRIP_ID AS tid,
  CE.FISHING_EVENT_ID AS feid,
  TS.fid, TS.sector,
  CE.year, CE.month, CE.log, CE.catch,
  NVL(A.MAJOR_STAT_AREA_CODE,0) AS major,
  NVL(A.MINOR_STAT_AREA_CODE,0) AS minor,
  NVL(A.LOCALITY_CODE,0) AS locality
FROM
  (SELECT -- Norm's query (modified) to categorize trips into sectors
  TF.TRIP_ID,
  COUNT(TRIP_ID) AS NFID,
  MIN(CASE
    WHEN TF.FISHERY_CODE IN (24) THEN 5
    WHEN TF.FISHERY_CODE IN (21)       AND TF.FISHERY_CODE NOT IN (24) THEN 2
    WHEN TF.FISHERY_CODE IN (52,57,59) AND TF.FISHERY_CODE NOT IN (24,21) THEN 4
    WHEN TF.FISHERY_CODE IN (17)       AND TF.FISHERY_CODE NOT IN (24,21,52,57,59) THEN 3
    WHEN TF.FISHERY_CODE IN (23)       AND TF.FISHERY_CODE NOT IN (24,21,52,57,59,17) THEN 1
    ELSE 0 END) AS FID,
  (CASE 
      WHEN COUNT(TF.TRIP_ID) >= 2 THEN INITCAP(MIN(F.FISHERY_NAME)) || ' & ' || INITCAP(MAX(F.FISHERY_NAME)) 
      ELSE INITCAP(MIN(F.FISHERY_NAME)) END) || --'' || 
     (CASE MIN(FS.FISHERY_SUBTYPE_DESCRIPTION) 
      WHEN 'Unspecified' THEN '' 
      ELSE ' ' || MIN(FS.FISHERY_SUBTYPE_DESCRIPTION) END) AS SECTOR
  FROM 
    @table.GF_TRIP_FISHERY TF
    INNER JOIN @table.FISHERY F ON
    TF.FISHERY_CODE = F.FISHERY_CODE
    INNER JOIN @table.FISHERY_SUBTYPE FS ON
    TF.FISHERY_SUBTYPE_CODE = FS.FISHERY_SUBTYPE_CODE
  WHERE 
    TF.FISHERY_CODE IN (17, 21, 23, 24, 52, 57, 59) AND -- Retain these fisheries
    TF.TRIP_TYPE_CODE NOT IN (18, 12813, 5669) -- Omit IPHC, research, and seamount trips
  GROUP BY 
    TF.TRIP_ID ) TS RIGHT OUTER JOIN

  (@table.GF_FE_DERIVED_AREA A RIGHT OUTER JOIN
  
  (SELECT  -- catch and effort stats for specified species
  E.TRIP_ID,
  C.FISHING_EVENT_ID,
  C.SPECIES_CODE AS spp,
  TO_CHAR(E.START_DATE,'YYYY') AS year,
  TO_CHAR(E.START_DATE,'MM') AS month,
  NVL(E.DATA_SOURCE_CODE,0) AS log,
  SUM(CASE
    WHEN C.CATCH_WEIGHT Is Null And C.CATCH_COUNT Is Null THEN 0.
    WHEN C.CATCH_WEIGHT Is Null And C.CATCH_COUNT>0 THEN C.CATCH_COUNT*@mnwt -- mnwt in kg
    WHEN C.CATCH_WEIGHT Is Not Null And TRIM(C.WEIGHT_UNIT_CODE)='PND' THEN C.CATCH_WEIGHT/2.20459
    WHEN C.CATCH_WEIGHT Is Not Null And TRIM(C.WEIGHT_UNIT_CODE)='KGM' THEN C.CATCH_WEIGHT
    WHEN C.CATCH_WEIGHT Is Not Null And TRIM(C.WEIGHT_UNIT_CODE)='MET' THEN C.CATCH_WEIGHT*1000.
    WHEN C.CATCH_WEIGHT Is Not Null And TRIM(C.WEIGHT_UNIT_CODE)='IPT' THEN C.CATCH_WEIGHT*2240./2.20459
    WHEN C.CATCH_WEIGHT Is Not Null And TRIM(C.WEIGHT_UNIT_CODE)='STN' THEN C.CATCH_WEIGHT*2000./2.20459
    ELSE 0 END) as catch
  FROM 
    @table.GF_FE_CATCH C RIGHT OUTER JOIN
    @table.GF_FISHING_EVENT E ON
     C.FISHING_EVENT_ID = E.FISHING_EVENT_ID
  WHERE C.SPECIES_CODE IN (@sppcode)
  GROUP BY
    E.TRIP_ID, C.FISHING_EVENT_ID, C.SPECIES_CODE, NVL(E.DATA_SOURCE_CODE,0),
    TO_CHAR(E.START_DATE,'YYYY'), TO_CHAR(E.START_DATE,'MM') ) CE ON

  CE.FISHING_EVENT_ID = A.FISHING_EVENT_ID ) ON
  CE.TRIP_ID = TS.TRIP_ID
  WHERE
    TS.fid = 1 OR (TS.fid <> 1 AND CE.log NOT IN (106,107))
  ORDER BY
    CE.spp, TS.fid, CE.year, CE.month
;

-- getData("fos_catch.sql",dbName="GFFOS",strSpp="429",server="ORADEV",type="ORA",trusted=FALSE,uid=,pwd=)

