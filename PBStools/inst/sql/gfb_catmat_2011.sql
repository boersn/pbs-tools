-- Modified from gfplot's procedure 'proc_catmat_2011.sql'
-- Original authors: Sean Anderson, Elise Keppel

SET NOCOUNT ON

DECLARE @use_mouthwidth AS BIT
SET @use_mouthwidth = 0

-- Constant to convert from km/hr to m/s
DECLARE @scon AS FLOAT
SET @scon = 16.66667

-- Get mean doorspread and speed from table of defaults
DECLARE @msog AS FLOAT
DECLARE @mds AS FLOAT
SELECT @mds = ISNULL(doorspread,0),
   @msog = ISNULL(speed,0) * @scon -- Convert speed from km/hr to m/s
FROM BOOT_DEFAULTS
WHERE SURVEY_ID IN(@surveyid)

-- Fishing event attributes for good (USABILITY_CODE = 0,1,2,6) sets:
SELECT S.SURVEY_SERIES_ID,
   S.SURVEY_ID,
   S.SURVEY_DESC,
   TRS.TRIP_ID,
   YEAR(T.TRIP_START_DATE) AS [YEAR],
   FE.FISHING_EVENT_ID,
   FE.FE_MAJOR_LEVEL_ID,
   FE.FE_START_LATTITUDE_DEGREE + FE.FE_START_LATTITUDE_MINUTE / 60 AS LATITUDE,
   -(FE.FE_START_LONGITUDE_DEGREE + FE.FE_START_LONGITUDE_MINUTE / 60) AS LONGITUDE,
   FEG.GROUPING_CODE,
   FE.MAJOR_STAT_AREA_CODE,
   FE.MINOR_STAT_AREA_CODE,
   COALESCE(FE.FE_MODAL_BOTTOM_DEPTH, FE.FE_BEGINNING_BOTTOM_DEPTH, FE.FE_END_BOTTOM_DEPTH) AS DEPTH_M,
   ISNULL(DATEDIFF(MI,FE_BEGIN_BOTTOM_CONTACT_TIME,
      FE_END_BOTTOM_CONTACT_TIME),
      DATEDIFF(MI,FE_END_DEPLOYMENT_TIME,
      FE_BEGIN_RETRIEVAL_TIME)) AS DURATION_MIN,
   NULLIF(FE_DISTANCE_TRAVELLED,0) * 1000.0 AS TOW_LENGTH_M, -- Convert to meters
   CASE @use_mouthwidth
      WHEN 1 THEN ISNULL(NULLIF(TS.TRLSP_MOUTH_OPENING_WIDTH,0),@mds)
      ELSE ISNULL(NULLIF(TS.TRLSP_DOORSPREAD,0),@mds) END AS DOORSPREAD_M,
   ISNULL(NULLIF(TS.TRLSP_SPEED,0) * @scon, @msog) AS SPEED_MPM
INTO #SETS
FROM SURVEY S
   INNER JOIN TRIP_SURVEY TRS ON
   S.SURVEY_ID = TRS.SURVEY_ID
   INNER JOIN TRIP T ON
   TRS.TRIP_ID = T.TRIP_ID
   INNER JOIN FISHING_EVENT FE ON
   T.TRIP_ID = FE.TRIP_ID
   LEFT JOIN TRAWL_SPECS TS ON
   FE.FISHING_EVENT_ID = TS.FISHING_EVENT_ID
   INNER JOIN FISHING_EVENT_GROUPING FEG ON
   FE.FISHING_EVENT_ID = FEG.FISHING_EVENT_ID
   INNER JOIN SURVEY_GROUPING SG ON
   S.SURVEY_ID = SG.SURVEY_ID AND
   SG.GROUPING_CODE = FEG.GROUPING_CODE
WHERE S.SURVEY_ID = @surveyid AND ISNULL(USABILITY_CODE,1) IN (0, 1, 2, 6) AND FE.FE_PARENT_EVENT_ID IS NULL


-- Cross-product:
SELECT FISHING_EVENT_ID, @sppcode AS SPECIES_CODE
INTO #SETS_FISH
FROM #SETS

-- STEP 2: Get the catch for the sets/fish cross product
--         Zero-weight sets are included
SELECT SF.FISHING_EVENT_ID,
   SF.SPECIES_CODE,
   CAST(SUM(ISNULL(CATCH_WEIGHT,0)) AS FLOAT) AS CATCH_WEIGHT,
   SUM(ISNULL(CATCH_COUNT,0)) AS CATCH_COUNT
INTO #CATCH
FROM #SETS_FISH SF
   LEFT OUTER JOIN (
      SELECT S.FISHING_EVENT_ID,
         C.SPECIES_CODE,
         CATCH_WEIGHT,
         CATCH_COUNT
      FROM #SETS S
         INNER JOIN FISHING_EVENT_CATCH FEC ON
         S.FISHING_EVENT_ID = FEC.FISHING_EVENT_ID
         INNER JOIN CATCH C ON
         FEC.CATCH_ID = C.CATCH_ID) C
   ON SF.FISHING_EVENT_ID = C.FISHING_EVENT_ID AND
   SF.SPECIES_CODE = C.SPECIES_CODE
GROUP BY SF.FISHING_EVENT_ID, SF.SPECIES_CODE

-- STEP 3 (final): Put it all together
-- Total time to execute is about 40 sec
SELECT S.SURVEY_SERIES_ID,
   S.SURVEY_ID,
   C.SPECIES_CODE,
   S.SURVEY_DESC,
   S.TRIP_ID,
   S.[YEAR],
   S.FISHING_EVENT_ID,
   S.FE_MAJOR_LEVEL_ID,
   S.LATITUDE,
   S.LONGITUDE,
   S.GROUPING_CODE,
   S.MAJOR_STAT_AREA_CODE,
   S.MINOR_STAT_AREA_CODE,
   S.DEPTH_M,
   S.DURATION_MIN,
   S.DOORSPREAD_M,
   S.SPEED_MPM,
   S.TOW_LENGTH_M,
   C.CATCH_WEIGHT,
   CAST(ISNULL(C.CATCH_WEIGHT / (S.TOW_LENGTH_M * S.DOORSPREAD_M),
      ISNULL(C.CATCH_WEIGHT / 
      (S.DOORSPREAD_M * (S.SPEED_MPM * S.DURATION_MIN)), 0)) AS DECIMAL(20,15)) AS DENSITY_KGPM2,
   C.CATCH_COUNT,
   C.CATCH_COUNT / 
      (S.DOORSPREAD_M * (S.SPEED_MPM * S.DURATION_MIN)) AS DENSITY_PCPM2
FROM #SETS S
   INNER JOIN #CATCH C ON
   S.FISHING_EVENT_ID = C.FISHING_EVENT_ID

--qu("gfb_catmat_2011.sql",dbName="GFBioSQL",strSpp="440",surveyid=1)

