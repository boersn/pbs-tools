-- SQL code to get IPHC hooh data (for index calculation)(originally bt by NO) to grab IPHC survey data from GFBioSQL
-- Last modified: 2014-10-17

SET NOCOUNT ON -- prevents timeout errors

-- 1. Colllect data at the Set level
SELECT  --TOP 10
  T.TRIP_ID,
  E.FE_MAJOR_LEVEL_ID,
  E.BLOCK_DESIGNATION,
  E.FE_DIRECTION_OF_SET,
  LBL.BAIT_LURE_CODE,
  ES.EFFECTIVE_SKATE
INTO #BLOCKS
FROM 
  (((TRIP_SURVEY TS INNER JOIN 
  SURVEY S ON 
    TS.SURVEY_ID = S.SURVEY_ID) INNER JOIN 
  (B02_FISHING_EVENT E INNER JOIN 
  B01_TRIP T ON 
    E.TRIP_ID = T.TRIP_ID) ON 
    TS.TRIP_ID = T.TRIP_ID) LEFT JOIN 
  IPHC_EFFECTIVE_SKATE ES ON 
    E.FISHING_EVENT_ID = ES.FISHING_EVENT_ID) LEFT JOIN 
  LONGLINE_BAIT_LURE LBL ON 
    E.FISHING_EVENT_ID = LBL.FISHING_EVENT_ID
WHERE
  E.FE_MINOR_LEVEL_ID Is Null AND 
  S.SURVEY_SERIES_ID IN (14) AND 
  E.BLOCK_DESIGNATION Is Not Null
  -- AND T.TRIP_ID IN (52040,73291)  -- for debugging (first and last trip)
  -- AND E.BLOCK_DESIGNATION IN ('2001','2103')  -- for debugging
GROUP BY 
  T.TRIP_ID, 
  E.FE_MAJOR_LEVEL_ID, 
  E.BLOCK_DESIGNATION,
  E.FE_DIRECTION_OF_SET,
  LBL.BAIT_LURE_CODE,
  ES.EFFECTIVE_SKATE
ORDER BY 
  T.TRIP_ID, 
  E.FE_MAJOR_LEVEL_ID, 
  E.BLOCK_DESIGNATION


-- 2. Collect data at the Skate level
SELECT
  T.TRIP_ID,
  E.FE_PARENT_EVENT_ID,
  E.FE_MAJOR_LEVEL_ID,
  E.FE_SUB_LEVEL_ID, 
  B.BLOCK_DESIGNATION,
  B.FE_DIRECTION_OF_SET,
  B.BAIT_LURE_CODE,
  B.EFFECTIVE_SKATE,
  COUNT(E.FE_MINOR_LEVEL_ID) AS HOOKS_PER_SKATE,
  SUM(CASE WHEN HS.HOOK_YIELD_CODE IN (7) THEN 0 ELSE 1 END) AS OBS_HOOKS_PER_SKATE,
  SUM(CASE WHEN HS.HOOK_YIELD_CODE IN (0,7) THEN 0 ELSE 1 END) AS USE_HOOKS_PER_SKATE
INTO #SKATES
FROM
  HOOK_SPECS HS INNER JOIN
  (#BLOCKS B INNER JOIN
  (SURVEY S INNER JOIN 
  (TRIP_SURVEY TS INNER JOIN
  (B02_FISHING_EVENT E INNER JOIN 
  B01_TRIP T ON
    E.TRIP_ID = T.TRIP_ID ) ON
    TS.TRIP_ID = T.TRIP_ID) ON
    S.SURVEY_ID = TS.SURVEY_ID) ON
    B.TRIP_ID = T.TRIP_ID AND
    B.FE_MAJOR_LEVEL_ID = E.FE_MAJOR_LEVEL_ID) ON
    HS.FISHING_EVENT_ID = E.FISHING_EVENT_ID
WHERE
  E.FE_MINOR_LEVEL_ID Is Not Null AND 
  S.SURVEY_SERIES_ID IN (14)
  --AND T.TRIP_ID IN (56914)  -- for debugging
  --AND B.BLOCK_DESIGNATION IN ('2092')  -- for debugging
GROUP BY 
  T.TRIP_ID,
  E.FE_PARENT_EVENT_ID,
  E.FE_MAJOR_LEVEL_ID,
  E.FE_SUB_LEVEL_ID, 
  B.BLOCK_DESIGNATION,
  B.FE_DIRECTION_OF_SET,
  B.BAIT_LURE_CODE,
  B.EFFECTIVE_SKATE
ORDER BY 
  T.TRIP_ID,
  E.FE_PARENT_EVENT_ID,
  E.FE_MAJOR_LEVEL_ID,
  E.FE_SUB_LEVEL_ID, 
  B.BLOCK_DESIGNATION

-- 3. 2012 Survey used 4 skates for index and 2 for experiments
-- Karina Cook's query
SELECT
  E.TRIP_ID, 
  E.FE_MAJOR_LEVEL_ID, 
  E.FE_SUB_LEVEL_ID, 
  LBL.BAIT_LURE_CODE, 
  BL.BAIT_LURE_DESC
INTO #KARINA
FROM 
  ((B02_FISHING_EVENT E INNER JOIN 
  LONGLINE_SPECS LS ON 
    E.FISHING_EVENT_ID = LS.FISHING_EVENT_ID) INNER JOIN 
  LONGLINE_BAIT_LURE LBL ON 
    LS.FISHING_EVENT_ID = LBL.FISHING_EVENT_ID) INNER JOIN 
  BAIT_LURE BL ON 
    LBL.BAIT_LURE_CODE = BL.BAIT_LURE_CODE
WHERE
  E.TRIP_ID IN (73290,73291) -- 2012 sets

-- Add in missing BAIT_LURE_CODES for 2012
UPDATE #SKATES
SET BAIT_LURE_CODE = COALESCE(
   (SELECT #KARINA.BAIT_LURE_CODE
    FROM #KARINA
    WHERE #KARINA.TRIP_ID     = #SKATES.TRIP_ID AND
    #KARINA.FE_MAJOR_LEVEL_ID = #SKATES.FE_MAJOR_LEVEL_ID AND
    #KARINA.FE_SUB_LEVEL_ID   = #SKATES.FE_SUB_LEVEL_ID),
    #SKATES.BAIT_LURE_CODE )

--select * from #SKATES

-- 4. Collect catch data by hook
SELECT 
  YEAR(T.TRIP_START_DATE) AS 'year',
  T.TRIP_ID,
  E.FISHING_EVENT_ID,
  E.FE_PARENT_EVENT_ID,
  SK.BLOCK_DESIGNATION,
  E.FE_MAJOR_LEVEL_ID,
  E.FE_SUB_LEVEL_ID, 
  E.FE_MINOR_LEVEL_ID,
  C.SPECIES_CODE,
  --C.CATCH_WEIGHT,
  C.CATCH_COUNT,
  S.SURVEY_SERIES_ID,
  HS.HOOK_YIELD_CODE,
  SK.HOOKS_PER_SKATE,
  SK.OBS_HOOKS_PER_SKATE,
  SK.USE_HOOKS_PER_SKATE,
  SK.FE_DIRECTION_OF_SET,
  SK.BAIT_LURE_CODE,
  SK.EFFECTIVE_SKATE
FROM
  HOOK_SPECS HS INNER JOIN
  (#SKATES SK INNER JOIN
  (SURVEY S INNER JOIN 
  (TRIP_SURVEY TS INNER JOIN
  (B01_TRIP T INNER JOIN 
  (B02_FISHING_EVENT E INNER JOIN
  (B02L3_Link_Fishing_Event_Catch LEC INNER JOIN
  B03_CATCH C ON
    LEC.CATCH_ID = C.CATCH_ID) ON
    E.FISHING_EVENT_ID = LEC.FISHING_EVENT_ID) ON
    T.TRIP_ID = E.TRIP_ID ) ON
    TS.TRIP_ID = T.TRIP_ID) ON
    S.SURVEY_ID = TS.SURVEY_ID) ON
    SK.TRIP_ID = T.TRIP_ID AND
    SK.FE_MAJOR_LEVEL_ID = E.FE_MAJOR_LEVEL_ID AND
    SK.FE_SUB_LEVEL_ID = E.FE_SUB_LEVEL_ID) ON
    HS.FISHING_EVENT_ID = E.FISHING_EVENT_ID
WHERE
  E.FE_MINOR_LEVEL_ID Is Not Null AND 
  S.SURVEY_SERIES_ID IN (14)
  --AND C.SPECIES_CODE IN (@sppcode)  -- for debugging
ORDER BY 
  YEAR(T.TRIP_START_DATE),
  T.TRIP_ID,
  E.FE_MAJOR_LEVEL_ID,
  E.FE_SUB_LEVEL_ID, 
  E.FE_MINOR_LEVEL_ID,
  C.SPECIES_CODE

--qu("gfb_iphc_hooks.sql",dbName="GFBioSQL",strSpp="401")

