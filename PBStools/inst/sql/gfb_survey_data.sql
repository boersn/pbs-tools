-- PJS Queries to get Survey Data
-- Note: All depths in GFBio are supposedly in metres (Maria Surry 190730)

SET NOCOUNT ON -- prevent timeout errors

SELECT
  Year(T.TRIP_START_DATE) AS [year],
  S.SURVEY_ID,
  T.TRIP_ID,
  V.VESSEL_NAME,
  T.TRIP_START_DATE,
  Count(T.TRIP_ID) AS Ntrip
INTO #gettrip
FROM
  SURVEY S INNER JOIN 
  (VESSEL V INNER JOIN 
  (TRIP T INNER JOIN TRIP_SURVEY TS
    ON T.TRIP_ID = TS.TRIP_ID) ON 
    (V.SUFFIX = T.SUFFIX) AND (V.VESSEL_ID = T.VESSEL_ID)) ON 
    S.SURVEY_ID = TS.SURVEY_ID
WHERE
  S.SURVEY_SERIES_ID IN (@survserid)
GROUP BY
  Year(T.TRIP_START_DATE),
  S.SURVEY_ID,
  T.TRIP_ID,
  V.VESSEL_NAME,
  T.TRIP_START_DATE

SELECT
  GT.year,
  Month(GT.TRIP_START_DATE) AS [Month],
  GT.TRIP_ID AS trip,
  --FE.FE_END_DEPLOYMENT_TIME AS [date],
  CONVERT(VARCHAR, FE.FE_END_DEPLOYMENT_TIME, 20) AS [date],
  GT.VESSEL_NAME AS vessel,
  FE.FISHING_EVENT_ID AS fe_id,
  FE.FE_MAJOR_LEVEL_ID AS [set],
  FE.REASON_CODE AS reason,
  FE.DFO_STAT_AREA_CODE AS dfo_stat,
  FE.FE_START_LATTITUDE_DEGREE + FE.FE_START_LATTITUDE_MINUTE/60. AS latitude,
  FE.FE_START_LONGITUDE_DEGREE + FE.FE_START_LONGITUDE_MINUTE/60. AS longitude,
  FE.MAJOR_STAT_AREA_CODE AS major,
  COALESCE(FE.GROUPING_CODE, FEG.GROUPING_CODE) AS GROUPING_CODE,
  G.AREA_KM2 AS area,
  FE.FE_BEGINNING_BOTTOM_DEPTH AS begin_depth,
  FE.FE_END_BOTTOM_DEPTH AS end_depth,
  FE.FE_BOTTOM_WATER_TEMP_DEPTH AS Seabird_depth,
  FE.FE_MODAL_BOTTOM_DEPTH AS modal_depth,
  TS.TRLSP_SPEED AS speed,
  CASE WHEN FE.FE_BEGIN_RETRIEVAL_TIME IS NOT NULL AND FE.FE_END_DEPLOYMENT_TIME IS NOT NULL THEN
    CONVERT(REAL, FE.FE_BEGIN_RETRIEVAL_TIME - FE.FE_END_DEPLOYMENT_TIME) * 24.
    ELSE NULL END AS [time],
  CASE WHEN FE.FE_END_BOTTOM_CONTACT_TIME IS NOT NULL AND FE.FE_BEGIN_BOTTOM_CONTACT_TIME IS NOT NULL THEN
    CONVERT(REAL, FE.FE_END_BOTTOM_CONTACT_TIME - FE.FE_BEGIN_BOTTOM_CONTACT_TIME) * 24.
    ELSE NULL END AS time2,
  FE.FE_DISTANCE_TRAVELLED AS distance_travelled,
  TS.TRLSP_WINGSPREAD AS wing,
  TS.TRLSP_MOUTH_OPENING_WIDTH AS [open],
  TS.TRLSP_DOORSPREAD AS door,
  TS.USABILITY_CODE AS usability,
  Count(FE.FISHING_EVENT_ID) AS N
INTO #getfe
FROM
  (((#gettrip GT INNER JOIN
  FISHING_EVENT FE ON
    GT.TRIP_ID = FE.TRIP_ID) LEFT JOIN 
  TRAWL_SPECS TS ON
    FE.FISHING_EVENT_ID = TS.FISHING_EVENT_ID) LEFT JOIN 
  FISHING_EVENT_GROUPING FEG ON
    FE.FISHING_EVENT_ID = FEG.FISHING_EVENT_ID AND
    FE.GROUPING_CODE = FEG.GROUPING_CODE) LEFT JOIN
  GROUPING G ON
    FE.GROUPING_CODE = G.GROUPING_CODE
GROUP BY
  GT.year,
  Month(GT.TRIP_START_DATE),
  GT.TRIP_ID,
  FE.FE_END_DEPLOYMENT_TIME,
  GT.VESSEL_NAME,
  FE.FISHING_EVENT_ID,
  FE.FE_MAJOR_LEVEL_ID,
  FE.REASON_CODE,
  FE.DFO_STAT_AREA_CODE,
  FE.FE_START_LATTITUDE_DEGREE + FE.FE_START_LATTITUDE_MINUTE/60.,
  FE.FE_START_LONGITUDE_DEGREE + FE.FE_START_LONGITUDE_MINUTE/60.,
  FE.MAJOR_STAT_AREA_CODE,
  COALESCE(FE.GROUPING_CODE, FEG.GROUPING_CODE),
  G.AREA_KM2,
  FE.FE_BEGINNING_BOTTOM_DEPTH,
  FE.FE_END_BOTTOM_DEPTH,
  FE.FE_BOTTOM_WATER_TEMP_DEPTH,
  FE.FE_MODAL_BOTTOM_DEPTH,
  TS.TRLSP_SPEED,
  CASE WHEN FE.FE_BEGIN_RETRIEVAL_TIME IS NOT NULL AND FE.FE_END_DEPLOYMENT_TIME IS NOT NULL THEN
    CONVERT(REAL, FE.FE_BEGIN_RETRIEVAL_TIME - FE.FE_END_DEPLOYMENT_TIME) * 24.
    ELSE NULL END,
  CASE WHEN FE.FE_END_BOTTOM_CONTACT_TIME IS NOT NULL AND FE.FE_BEGIN_BOTTOM_CONTACT_TIME IS NOT NULL THEN
    CONVERT(REAL, FE.FE_END_BOTTOM_CONTACT_TIME - FE.FE_BEGIN_BOTTOM_CONTACT_TIME) * 24.
    ELSE NULL END,
  FE.FE_DISTANCE_TRAVELLED,
  TS.TRLSP_WINGSPREAD,
  TS.TRLSP_MOUTH_OPENING_WIDTH,
  TS.TRLSP_DOORSPREAD,
  TS.USABILITY_CODE

SELECT
  FEC.TRIP_ID,
  FEC.FISHING_EVENT_ID,
  C.CATCH_ID,
  C.SPECIES_CODE AS species,
  C.CATCH_WEIGHT AS weight,
  C.CATCH_COUNT AS [number]
INTO #getspecies
FROM
  CATCH C INNER JOIN 
  FISHING_EVENT_CATCH FEC ON
    C.CATCH_ID = FEC.CATCH_ID
WHERE
  C.SPECIES_CODE IN (@sppcode)

SELECT
  GFE.[year],
  GFE.[Month],
  GFE.trip,
  GFE.fe_id,
  GFE.[date],
  GFE.vessel,
  GFE.[set],
  GFE.reason,
  GFE.major,
  GFE.dfo_stat,
  GFE.GROUPING_CODE,
  GFE.area,
  GFE.latitude,
  GFE.longitude,
  GFE.begin_depth,
  GFE.end_depth,
  GFE.Seabird_depth,
  GFE.modal_depth,
  GFE.speed,
  GFE.[time],
  GFE.time2,
  GFE.distance_travelled,
  GFE.wing,
  GFE.[open],
  GFE.door,
  GFE.usability,
  GSP.species,
  GSP.weight,
  GSP.number
FROM
  #getfe GFE LEFT JOIN
  #getspecies GSP ON
    GFE.trip = GSP.TRIP_ID AND
    GFE.fe_id = GSP.FISHING_EVENT_ID
ORDER BY
  GFE.trip,
  GFE.fe_id


-- qu("gfb_survey_data.sql",dbName="GFBioSQL",strSpp="439", survserid=1)  -- RSR QCS syn  (190710)
-- qu("gfb_survey_data.sql",dbName="GFBioSQL",strSpp="439", survserid=2)  -- RSR HS ass   (190729)
-- qu("gfb_survey_data.sql",dbName="GFBioSQL",strSpp="439", survserid=16) -- RSR WCHG syn (190729)
-- qu("gfb_survey_data.sql",dbName="GFBioSQL",strSpp="435", survserid=16) -- BOR WCHG syn (190729)
-- qu("gfb_survey_data.sql",dbName="GFBioSQL",strSpp="435", survserid=4)  -- BOR WCVI syn (190730)
-- qu("gfb_survey_data.sql",dbName="GFBioSQL",strSpp="435", survserid=1)  -- BOR QCS syn  (190710)
-- qu("gfb_survey_data.sql",dbName="GFBioSQL",strSpp="435", survserid=3)  -- BOR HS syn   (190729, 190829)

