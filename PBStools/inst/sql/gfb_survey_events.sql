-- Query to get survey fishing events for Vania|Sean (RH 190128)
SET NOCOUNT ON -- prevents timeout errors

-- Identify surveys by original index only (RH 181219) - some restrats may need to be added over time
SELECT
  S.SURVEY_SERIES_ID,
  S.SURVEY_ID
INTO #ORIGINAL_SURVEYS
FROM SURVEY S
WHERE
  (S.ORIGINAL_IND='Y' AND S.SURVEY_ID NOT IN (79)) -- Exclude original stratification for 2006 WCHG Synoptic (use SVID 123)
  OR
  (S.ORIGINAL_IND='N' AND S.SURVEY_SERIES_ID IN (21) AND S.SURVEY_ID BETWEEN 91 AND 104) -- Special case for GIG Historical
ORDER BY
  S.SURVEY_SERIES_ID, S.SURVEY_ID

-- Merge tables to get TRIP_ID, SURVEY_ID, and SURVEY_SERIES_ID (RH 181219)
SELECT
  TS.TRIP_ID,
  CASE
    WHEN OS.SURVEY_SERIES_ID IS NULL THEN 999
    WHEN OS.SURVEY_SERIES_ID IN (6,7) THEN 670          -- Shrimp trawl surveys
    WHEN OS.SURVEY_SERIES_ID IN (35,41,42,43) THEN 350  -- Sablefish surveys
    WHEN OS.SURVEY_SERIES_ID BETWEEN 82 AND 87 THEN 820 -- Jig surveys
    WHEN OS.SURVEY_ID IN (130) THEN 40                  -- HBLL South survey
    WHEN OS.SURVEY_ID IN (131) THEN 39                  -- HBLL North survey
    WHEN OS.SURVEY_SERIES_ID IN (10,21) THEN 21         -- GIG historical
    ELSE OS.SURVEY_SERIES_ID END AS SURVEY_SERIES_ID,
  MAX(OS.SURVEY_ID) AS SURVEY_ID
INTO #TripSurvSer
FROM 
  --#onlyTID T INNER JOIN
  TRIP T INNER JOIN
  (#ORIGINAL_SURVEYS OS INNER JOIN
  TRIP_SURVEY TS ON
    OS.SURVEY_ID = TS.SURVEY_ID) ON
    T.TRIP_ID = TS.TRIP_ID
--WHERE T.TRIP_ID IN (10921,62066)
GROUP BY
  TS.TRIP_ID,
  CASE
    WHEN OS.SURVEY_SERIES_ID IS NULL THEN 999
    WHEN OS.SURVEY_SERIES_ID IN (6,7) THEN 670          -- Shrimp trawl surveys
    WHEN OS.SURVEY_SERIES_ID IN (35,41,42,43) THEN 350  -- Sablefish surveys
    WHEN OS.SURVEY_SERIES_ID BETWEEN 82 AND 87 THEN 820 -- Jig surveys
    WHEN OS.SURVEY_ID IN (130) THEN 40                  -- HBLL South survey
    WHEN OS.SURVEY_ID IN (131) THEN 39                  -- HBLL North survey
    WHEN OS.SURVEY_SERIES_ID IN (10,21) THEN 21         -- GIG historical
    ELSE OS.SURVEY_SERIES_ID END

SELECT
  TSS.SURVEY_SERIES_ID,
  TSS.SURVEY_ID,
  T.TRIP_ID,
  FE.FISHING_EVENT_ID,
  FE.FE_MAJOR_LEVEL_ID,
  FE.GEAR_CODE,
  FE.REASON_CODE,
  FE.MAJOR_STAT_AREA_CODE,
  FE.MINOR_STAT_AREA_CODE,
  FE.LOCALITY_CODE,
  Year(T.TRIP_START_DATE) AS [year],
  T.TRIP_START_DATE,
  FE.FE_BEGIN_DEPLOYMENT_TIME,
  FE.FE_END_DEPLOYMENT_TIME,
  FE.FE_BEGIN_RETRIEVAL_TIME,
  FE.FE_END_RETRIEVAL_TIME,
  LS.LGLSP_HOOKS_SET_COUNT,
  LS.SKATE_COUNT,
  ES.EFFECTIVE_SKATE,
  COALESCE(LS.USABILITY_CODE,PS.USABILITY_CODE) AS USABILITY_CODE
FROM
  (((( #TripSurvSer TSS INNER JOIN
  B01_TRIP T  ON
    TSS.TRIP_ID = T.TRIP_ID) INNER JOIN
  B02_FISHING_EVENT FE ON 
    T.TRIP_ID = FE.TRIP_ID) LEFT JOIN
  IPHC_EFFECTIVE_SKATE ES ON 
    FE.FISHING_EVENT_ID = ES.FISHING_EVENT_ID) LEFT JOIN 
  LONGLINE_SPECS LS ON 
    FE.FISHING_EVENT_ID = LS.FISHING_EVENT_ID) LEFT JOIN
  TRAP_SPECS PS ON
    FE.FISHING_EVENT_ID = PS.FISHING_EVENT_ID
WHERE
  TSS.SURVEY_SERIES_ID IN (14,350) AND
  FE.FE_MINOR_LEVEL_ID Is Null
ORDER BY
  TSS.SURVEY_SERIES_ID,
  TSS.SURVEY_ID,
  T.TRIP_ID,
  FE.FISHING_EVENT_ID,
  FE.FE_MAJOR_LEVEL_ID

--qu("gfb_survey_events.sql",dbName="GFBioSQL",strSpp="394")
