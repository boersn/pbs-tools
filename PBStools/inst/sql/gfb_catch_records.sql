-- Research survey catch for 'getCatch', 'weightBio', and 'requestAges'.
-- This query is no longer duplicated as 'gfb_gfb_catch.sql', formerly use by 'requestAges'.
-- Last revised: RH 2017-07-31

SET NOCOUNT ON  -- prevents timeout errors

-- =====ASSOCIATE TRIPS WITH SURVEYS=====

-- Merge tables to get TRIP_ID, SURVEY_ID, and SURVEY_SERIES_ID
SELECT
  TS.TRIP_ID, 
  TS.SURVEY_ID, 
  IsNull(S.SURVEY_SERIES_ID,0) AS SURVEY_SERIES_ID,
  CASE 
    WHEN S.ORIGINAL_IND='Y' THEN 1
    WHEN S.ORIGINAL_IND='N' THEN 2
    ELSE 3 END AS ORIGINAL_IND
INTO #TempTripSurv
FROM 
  SURVEY S RIGHT OUTER JOIN
  TRIP_SURVEY TS ON
  S.SURVEY_ID = TS.SURVEY_ID 

-- TRIP_ID can be associated with more than one SURVEY_ID, which can include the original index or not.
-- Choose one SURVEY_ID per TRIP_ID, preferably the orginal index.
-- When the orginal is not avialable, choose a non-original index.
SELECT
  TS.TRIP_ID, 
  TS.SURVEY_ID, 
  TS.SURVEY_SERIES_ID,
  TS.ORIGINAL_IND
INTO #TripSurvSer
FROM
  (SELECT *,
    ROW_NUMBER() OVER (PARTITION BY TTS.TRIP_ID ORDER BY TTS.ORIGINAL_IND, TTS.SURVEY_ID) AS RN
  FROM #TempTripSurv TTS) AS TS
WHERE TS.RN = 1
ORDER BY TS.TRIP_ID

-- Gather latest GROUPING_CODE by FISHING_EVENT_ID
SELECT *
INTO #FishEventGroup
FROM
  (SELECT *,
    ROW_NUMBER() OVER (PARTITION BY LEG.FISHING_EVENT_ID ORDER BY LEG.GROUPING_CODE DESC) AS RN
  FROM FISHING_EVENT_GROUPING LEG) AS FEG
WHERE FEG.RN = 1
ORDER BY FEG.FISHING_EVENT_ID


-- =====BEST VALUES FROM FISHING EVENTS=====
-- Derive `Best` values from B02 Fishing Events
SELECT --TOP 20
  B02.TRIP_ID,
  B02.FISHING_EVENT_ID,
  B02.FE_MAJOR_LEVEL_ID,
---  'Best_Long' = CASE
---    WHEN B02.FE_START_LONGITUDE_DEGREE > 0 AND B02.FE_START_LONGITUDE_DEGREE IS NOT NULL AND 
---      B02.FE_START_LONGITUDE_MINUTE IS NOT NULL AND B02.FE_END_LONGITUDE_DEGREE > 0 AND 
---      B02.FE_END_LONGITUDE_DEGREE IS NOT NULL AND B02.FE_END_LONGITUDE_MINUTE IS NOT NULL THEN
---      ((B02.FE_START_LONGITUDE_DEGREE + (B02.FE_START_LONGITUDE_MINUTE / 60.0)) + (B02.FE_END_LONGITUDE_DEGREE + (B02.FE_END_LONGITUDE_MINUTE / 60.0))) / 2.0
---    WHEN B02.FE_START_LONGITUDE_DEGREE > 0 AND B02.FE_START_LONGITUDE_DEGREE IS NOT NULL AND B02.FE_START_LONGITUDE_MINUTE IS NOT NULL THEN
---      B02.FE_START_LONGITUDE_DEGREE + (B02.FE_START_LONGITUDE_MINUTE / 60.0)
---    WHEN B02.FE_END_LONGITUDE_DEGREE > 0 AND B02.FE_END_LONGITUDE_DEGREE IS NOT NULL AND B02.FE_END_LONGITUDE_MINUTE IS NOT NULL THEN
---      B02.FE_END_LONGITUDE_DEGREE + (B02.FE_END_LONGITUDE_MINUTE / 60.0)
---    ELSE NULL END,
---  'Best_Lat' = CASE
---    WHEN B02.FE_START_LATTITUDE_DEGREE > 0 AND B02.FE_START_LATTITUDE_DEGREE IS NOT NULL AND 
---      B02.FE_START_LATTITUDE_MINUTE IS NOT NULL AND B02.FE_END_LATTITUDE_DEGREE > 0 AND 
---      B02.FE_END_LATTITUDE_DEGREE IS NOT NULL AND B02.FE_END_LATTITUDE_MINUTE IS NOT NULL THEN
---      ((B02.FE_START_LATTITUDE_DEGREE + (B02.FE_START_LATTITUDE_MINUTE / 60.0)) + (B02.FE_END_LATTITUDE_DEGREE + (B02.FE_END_LATTITUDE_MINUTE / 60.0))) / 2.0
---    WHEN B02.FE_START_LATTITUDE_DEGREE > 0 AND B02.FE_START_LATTITUDE_DEGREE IS NOT NULL AND B02.FE_START_LATTITUDE_MINUTE IS NOT NULL THEN
---      B02.FE_START_LATTITUDE_DEGREE + (B02.FE_START_LATTITUDE_MINUTE / 60.0)
---    WHEN B02.FE_END_LATTITUDE_DEGREE > 0 AND B02.FE_END_LATTITUDE_DEGREE IS NOT NULL AND B02.FE_END_LATTITUDE_MINUTE IS NOT NULL THEN
---      B02.FE_END_LATTITUDE_DEGREE + (B02.FE_END_LATTITUDE_MINUTE / 60.0)
---    ELSE NULL END,
  'Best_Depth' = CASE
    WHEN B02.GEAR_CODE IN (0,1,2,4,5,8,11,13,14,16) THEN  -- bottom gear
      COALESCE(B02.FE_BEGINNING_BOTTOM_DEPTH, B02.FE_END_BOTTOM_DEPTH, B02.FE_MODAL_BOTTOM_DEPTH, B02.FE_MIN_BOTTOM_DEPTH, B02.FE_MAX_BOTTOM_DEPTH,
        B02.FE_BEGINNING_GEAR_DEPTH, B02.FE_END_GEAR_DEPTH, B02.FE_MODAL_GEAR_DEPTH, B02.FE_MIN_GEAR_DEPTH, B02.FE_MAX_GEAR_DEPTH, 
        B02.FE_BEGIN_CAPTURE_DEPTH, B02.FE_END_CAPTURE_DEPTH, B02.FE_MODAL_CAPTURE_DEPTH, B02.FE_MIN_CAPTURE_DEPTH, B02.FE_MAX_CAPTURE_DEPTH,
        B02.FE_BEGIN_TARGET_DEPTH, B02.FE_END_TARGET_DEPTH, B02.FE_MODAL_TARGET_DEPTH, B02.FE_MIN_TARGET_DEPTH, B02.FE_MAX_TARGET_DEPTH)
    WHEN B02.GEAR_CODE IN (3,6,7,9,10,12,17,18,22) THEN  -- midwater gear
      COALESCE(B02.FE_BEGINNING_GEAR_DEPTH, B02.FE_END_GEAR_DEPTH, B02.FE_MODAL_GEAR_DEPTH, B02.FE_MIN_GEAR_DEPTH, B02.FE_MAX_GEAR_DEPTH,
        B02.FE_BEGIN_CAPTURE_DEPTH, B02.FE_END_CAPTURE_DEPTH, B02.FE_MODAL_CAPTURE_DEPTH, B02.FE_MIN_CAPTURE_DEPTH, B02.FE_MAX_CAPTURE_DEPTH, 
        B02.FE_BEGIN_TARGET_DEPTH, B02.FE_END_TARGET_DEPTH, B02.FE_MODAL_TARGET_DEPTH, B02.FE_MIN_TARGET_DEPTH, B02.FE_MAX_TARGET_DEPTH,
        B02.FE_BEGINNING_BOTTOM_DEPTH, B02.FE_END_BOTTOM_DEPTH, B02.FE_MODAL_BOTTOM_DEPTH, B02.FE_MIN_BOTTOM_DEPTH, B02.FE_MAX_BOTTOM_DEPTH)
    ELSE 0 END
INTO #BestEvents
FROM 
  B02_FISHING_EVENT B02
WHERE B02.FE_SUB_LEVEL_ID IS NULL  -- FISHING_EVENT_ID REPEATED MANY TIMES FOR HOOKS AND TRAPS IF NOT NULL (STUPID IDEA)


-- ===== Tie everything together =====
SELECT --TOP 20
  T.TRIP_ID AS TID,
  E.FISHING_EVENT_ID AS FEID,
  E.FE_MAJOR_LEVEL_ID AS [set],
  C.CATCH_ID AS CID,                                     -- B03_CATCH
  'SSID' = CASE                                             -- SURVEY
    WHEN TSS.SURVEY_SERIES_ID IS NULL OR TSS.SURVEY_SERIES_ID IN (0) THEN (CASE
      WHEN E.BLOCK_DESIGNATION IN ('TASU','FLAMINGO') THEN 22
      WHEN E.BLOCK_DESIGNATION IN ('TRIANGLE','BROOKS') THEN 36
      ELSE TSS.SURVEY_SERIES_ID END)
    ELSE TSS.SURVEY_SERIES_ID END,
  'SVID' = TSS.SURVEY_ID,
  'OI' = TSS.ORIGINAL_IND, --CASE
    --WHEN TSS.ORIGINAL_IND IN ('Y') THEN 'TRUE'
    --ELSE 'FALSE' END,
  'GC'   = CASE                                             -- SURVEY_GROUPING
    WHEN E.GROUPING_CODE IS NOT NULL THEN E.GROUPING_CODE
    --WHEN TSSG.GROUPING_CODE IS NOT NULL THEN TSSG.GROUPING_CODE
    WHEN E.BLOCK_DESIGNATION IN ('TASU','FLAMINGO') THEN (CASE
      WHEN BB.Best_Depth BETWEEN 20 AND 70 THEN 321
      WHEN BB.Best_Depth BETWEEN 70.001 AND 150 THEN 322
      WHEN BB.Best_Depth BETWEEN 150.001 AND 260 THEN 323
      ELSE NULL END)
    WHEN E.BLOCK_DESIGNATION IN ('TRIANGLE','BROOKS') THEN (CASE
      WHEN BB.Best_Depth BETWEEN 20 AND 70 THEN 324
      WHEN BB.Best_Depth BETWEEN 70.001 AND 150 THEN 325
      WHEN BB.Best_Depth BETWEEN 150.001 AND 260 THEN 326
      ELSE NULL END)
    ELSE NULL END,
  E.BLOCK_DESIGNATION AS block,
  CONVERT(smalldatetime,CONVERT(char(10),T.TRIP_START_DATE,20)) AS [date], 
  Year(T.TRIP_START_DATE) AS [year],
  IsNull(E.MAJOR_STAT_AREA_CODE,0) AS major,
  IsNull(E.MINOR_STAT_AREA_CODE,0) AS minor,
  IsNull(E.LOCALITY_CODE,0) AS locality,
  ISNULL(BB.Best_Depth,0) As depth,
  ISNULL(E.GEAR_CODE,0) AS gear,
  C.SPECIES_CODE AS spp, 
  C.CATCH_WEIGHT AS wt, 
  C.CATCH_COUNT AS pcs, 
  COALESCE(C.CATCH_WEIGHT, C.CATCH_COUNT * F.fishwt, 0) AS catKg
INTO #B01B03
FROM 
  #TripSurvSer TSS INNER JOIN
  (#BestEvents BB RIGHT OUTER JOIN
  (B01_TRIP T INNER JOIN 
  (B02_FISHING_EVENT E INNER JOIN 
  (B02L3_Link_Fishing_Event_Catch L INNER JOIN
  (B03_CATCH C INNER JOIN 
  (SELECT
    C.SPECIES_CODE,
    Avg(C.CATCH_WEIGHT) AS mnwt, 
    Avg(C.CATCH_COUNT) AS mnct, 
    Count(C.CATCH_WEIGHT) AS n, 
    Avg(C.CATCH_WEIGHT/C.CATCH_COUNT) AS fishwt
    FROM B03_CATCH C
    WHERE
      C.SPECIES_CODE IN (@sppcode) AND 
      C.CATCH_WEIGHT > 0 AND
      C.CATCH_COUNT > 1
    GROUP BY 
      C.SPECIES_CODE ) F ON 
    C.SPECIES_CODE = F.SPECIES_CODE ) ON
    L.CATCH_ID = C.CATCH_ID) ON 
    E.TRIP_ID = L.TRIP_ID AND
    E.FISHING_EVENT_ID = L.FISHING_EVENT_ID) ON
    T.TRIP_ID = E.TRIP_ID ) ON
    T.TRIP_ID = BB.TRIP_ID AND
    E.FISHING_EVENT_ID = BB.FISHING_EVENT_ID AND
    E.FE_MAJOR_LEVEL_ID = BB.FE_MAJOR_LEVEL_ID ) ON
    TSS.TRIP_ID = T.TRIP_ID
WHERE
  C.SPECIES_CODE IN (@sppcode) AND 
  T.TRIP_SUB_TYPE_CODE IN (2,3) AND
  E.FE_SUB_LEVEL_ID IS NULL  -- FISHING_EVENT_ID REPEATED MANY TIMES FOR HOOKS AND TRAPS IF NOT NULL (STUPID IDEA)

-- Add in missing Gouping Codes to main table B01B03
UPDATE #B01B03
SET #B01B03.GC = COALESCE( #B01B03.GC,
   (SELECT #FishEventGroup.GROUPING_CODE 
    FROM #FishEventGroup
    WHERE #FishEventGroup.FISHING_EVENT_ID = #B01B03.FEID) )

SELECT BS.*
FROM #B01B03 BS
ORDER BY
  BS.TID, BS.FEID, BS.CID, BS.SSID, BS.SVID


--getData("gfb_catch_records.sql","GFBioSQL",strSpp="401",as.is=c(rep(F,14),T,rep(F,3)))
--qu("gfb_catch_records.sql",dbName="GFBioSQL",strSpp="607",as.is=c(rep(F,14),T,rep(F,3)))
--qu("gfb_catch_records.sql",dbName="GFBioSQL",strSpp="439",as.is=c(rep(F,16),T,rep(F,3)))

